Документация к коду "Task Manager"

Данный проект представляет собой приложение для управления задачами с использованием библиотеки PyQt6. Оно предназначено для добавления, удаления, изменения статусов, сохранения и визуализации задач с указанием их параметров и статуса выполнения. Данные сохраняются локально в файлах формата JSON или XLS.

1. Добавление задач
- Возможность добавлять задачи с полями:
  - Название - краткое описание задачи.
  - Описание - детальное описание задачи.
  - Исполнитель - имя ответственного за выполнение задачи.
  - Срок выполнения - дата, до которой задача должна быть выполнена.
- Проверка на заполненность всех полей перед добавлением задачи.
- Каждая задача автоматически получает уникальный идентификатор (ID).

2. Просмотр и управление задачами
- Таблица задач:
  - Визуализация задач в виде таблицы с колонками:
    - ID, Название, Описание, Исполнитель, Срок выполнения, Статус.
  - Поддержка статусов:
    - "Не начата", "В процессе", "Выполнена".
- Изменение статуса задачи:
  - "Отметить выполненной" переводит задачу в статус Выполнена.
  - "Отметить в процессе" переводит задачу в статус В процессе.
- Удаление задач:
  - Удаление выбранной задачи с помощью кнопки Удалить задачу.

3. Сохранение и загрузка данных
- Сохранение задач в JSON:
  - Экспорт задач в файл формата `.json` с текущими данными.
- Сохранение задач в Excel (XLS):
  - Сохранение задач в файл `.xls` с колонками:
    - ID, Название, Описание, Исполнитель, Срок выполнения, Статус.
- Загрузка задач из JSON:
  - Импорт задач из файла `.json` в приложение.

4. График эффективности исполнителей
- Визуализация количества завершённых задач по каждому исполнителю:
  - Столбчатая диаграмма с именами исполнителей на оси X и количеством выполненных задач на оси Y.
  - Значения на вершинах столбцов показывают количество выполненных задач.
  - График обновляется при изменении статусов задач.

5. Интерфейс пользователя
- Основное окно:
  - Таблица для отображения всех задач.
  - Кнопки для управления задачами и их сохранения.
  - График эффективности исполнителей.
- Диалог добавления задачи:
  - Поля для ввода:
    - Название, Описание, Исполнитель, Срок выполнения.
  - Кнопки: Добавить и Отмена.

6. Функции статистики
- Автоматическая нумерация ID: Каждая новая задача получает уникальный ID.
- Подсчёт задач по статусам: Отслеживается количество выполненных задач для каждого исполнителя.

7. Технические аспекты
- Обработка ошибок:
  - Вывод предупреждений при попытке:
    - Добавить задачу с пустыми полями.
    - Удалить или изменить статус задачи без выбора строки.
    - Сохранить или загрузить данные при ошибках файловой системы.

Класс TaskManagerApp

Основной класс приложения, управляющий логикой и интерфейсом.

1. Конструктор: `__init__`
   - Инициализация окна, структуры данных и пользовательского интерфейса.

2. Метод: `init_ui`
   - Создание основного интерфейса:
     - Таблица задач (`QTableWidget`).
     - Кнопки управления:
       - Добавить задачу.
       - Удалить задачу.
       - Сохранить задачи в JSON.
       - Сохранить задачи в XLS.
       - Загрузить задачи.
     - График эффективности (`matplotlib`).

3. Метод: `add_task`
   - Добавляет новую задачу в таблицу.
   - Параметры: название, описание, исполнитель, срок выполнения.

4. Метод: `delete_task`
   - Удаляет выбранную задачу из таблицы и списка.

5. Метод: `mark_completed`
   - Изменяет статус выбранной задачи на *Выполнена*.

6. Метод: `mark_in_progress`
   - Изменяет статус выбранной задачи на *В процессе*.

7. Метод: `save_to_file_json`
   - Сохраняет задачи в файл `.json`.

8. Метод: `save_to_file_xls`
   - Сохраняет задачи в файл `.xls` с использованием `xlwt`.

9. Метод: `load_from_file`
   - Загружает задачи из файла `.json`.

10. Метод: `update_performance_graph`
    - Обновляет график эффективности исполнителей.

Класс TaskDialog

Диалог для добавления новой задачи.

1. Конструктор: `__init__`
   - Создаёт поля ввода для названия, описания, исполнителя и срока выполнения.

2. Метод: `get_data`
   - Возвращает данные задачи в виде словаря.

Пример использования

1. Запустите приложение.
2. Добавьте задачи через диалоговое окно.
3. Установите статус задачи на Выполнена или В процессе.
4. Сохраните задачи в формате JSON или Excel.
5. Загрузите задачи из сохранённого файла для продолжения работы.
